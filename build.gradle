buildscript {
    repositories {
        mavenLocal()
        maven {
            name = 'forge'
            url = 'https://maven.minecraftforge.net/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
    }
}

import groovy.json.JsonBuilder

import net.minecraftforge.srgutils.IMappingFile

import java.nio.file.Files
import net.minecraftforge.forge.tasks.*
import static net.minecraftforge.forge.tasks.Util.*

import net.minecraftforge.gradle.common.tasks.DownloadMavenArtifact
import net.minecraftforge.gradle.common.tasks.ExtractInheritance
import net.minecraftforge.gradle.common.tasks.SignJar
import net.minecraftforge.gradle.common.tasks.ApplyBinPatches
import net.minecraftforge.gradle.common.tasks.ApplyBinPatches
import net.minecraftforge.gradle.common.tasks.ExtractMCPData

import net.minecraftforge.gradle.patcher.tasks.GenerateBinPatches
import net.minecraftforge.gradle.patcher.tasks.ReobfuscateJar

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.ide.eclipse.model.SourceFolder

import org.apache.commons.compress.archivers.zip.ZipFile
import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream

import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.FieldVisitor
import org.objectweb.asm.MethodVisitor

plugins {
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'eclipse'
}

Util.init() //Init all our extension methods!

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

//------------------------------------------------------------------------------------------------------------------------------------------
// Configuration
//------------------------------------------------------------------------------------------------------------------------------------------

ext {
    JAR_SIGNER = null
    if (project.hasProperty('keystore')) {
        JAR_SIGNER = [
            storepass: project.properties.keystoreStorePass,
            keypass: project.properties.keystoreKeyPass,
            keystore: project.properties.keystore
        ]
    }
    MAPPING_CHANNEL = 'stable'
    MAPPING_VERSION = '39-1.12'
    MC_VERSION = '1.12.2'
    MCP_VERSION = '20200226.224830'
    POST_PROCESSOR = [
        tool: 'net.minecraftforge:mcpcleanup:2.3.2:fatjar',
        repo: 'https://maven.minecraftforge.net/',
        args: ['--input', '{input}', '--output', '{output}']
    ]
}

//------------------------------------------------------------------------------------------------------------------------------------------
// RetroGradle
//------------------------------------------------------------------------------------------------------------------------------------------

//apply from: 'retrogradle-dev.gradle'
ext {
    LEGACY_MAJOR = 14     // Legacy versions have an API change prefix
    LEGACY_BUILD = 2861   // Base build number to not conflict with existing build numbers
    BUILD_NUMBER = 0      // LEGACY_BUILD + commit offset, used to mimic unique build from old versions
    SPEC_VERSION = '23.5' // This is overwritten by git tag, but here so dev time doesn't explode
}

//------------------------------------------------------------------------------------------------------------------------------------------
// MCP
//------------------------------------------------------------------------------------------------------------------------------------------

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    mcp {
        config = MC_VERSION + '-' + MCP_VERSION
        pipeline = 'joined'
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Clean
//------------------------------------------------------------------------------------------------------------------------------------------

project(':clean') {
    evaluationDependsOn(':mcp')
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.patcher'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation ('net.minecraftforge:mergetool:0.2.3.3:forge') {
            exclude group: 'org.ow2.asm', module: 'asm-tree'
            exclude group: 'org.ow2.asm', module: 'asm-util'
            exclude group: 'org.ow2.asm', module: 'asm'
        }
    }

    patcher {
        parent = project(':mcp')
        mcVersion = MC_VERSION
        patchedSrc = file('src/main/java')

        mappings channel: MAPPING_CHANNEL, version: MAPPING_VERSION
        processor = POST_PROCESSOR

        runs {
            clean_client {
                client true
                taskName 'clean_client'
                ideaModule "${rootProject.name}.${project.name}.main"

                main 'net.minecraft.client.main.Main'
                workingDirectory project.file('run')

                args '--gameDir', '.'
                args '--version', MC_VERSION
                args '--assetsDir', downloadAssets.output
                args '--assetIndex', '{asset_index}'
                args '--accessToken', '0'
            }

            clean_server {
                client false
                taskName 'clean_server'
                ideaModule "${rootProject.name}.${project.name}.main"

                main 'net.minecraft.server.MinecraftServer'
                workingDirectory project.file('run')
            }
        }
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Forge
//------------------------------------------------------------------------------------------------------------------------------------------

project(':forge') {
    evaluationDependsOn(':clean')
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.patcher'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    group = 'net.minecraftforge'

    sourceSets {
        main {
            java {
                srcDirs = ["$rootDir/src/main/java"]
            }
            resources {
                srcDirs = ["$rootDir/src/main/resources"]
            }
        }
        test {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
            java {
                srcDirs = ["$rootDir/src/test/java"]
            }
            resources {
                srcDirs = ["$rootDir/src/test/resources"]
            }
        }
        userdev {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }
        userdev_test {
            compileClasspath += sourceSets.userdev.runtimeClasspath
            runtimeClasspath += sourceSets.userdev.runtimeClasspath
            compileClasspath += sourceSets.test.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }
    //Eclipse adds the sourcesets twice, once where we tell it to, once in the projects folder. No idea why. So delete them
    eclipse.classpath.file.whenMerged { cls -> cls.entries.removeIf { e -> e instanceof SourceFolder && e.path.startsWith('src/') && !e.path.startsWith('src/main/') } }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            // GTNH LaunchWrapper
            name "GTNH Maven"
            url "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
            allowInsecureProtocol = true
        }
    }

    ext {
        GIT_INFO = Util.gitInfo(rootProject.file('.'))

        MCP_ARTIFACT = project(':mcp').mcp.config
        SPECIAL_SOURCE = 'net.md-5:SpecialSource:1.9.0'
        SPECIAL_SOURCE_MCP = 'net.md-5:SpecialSource:1.8.5'
        VERSION_JSON = project(':mcp').file('build/mcp/downloadJson/version.json')
        BINPATCH_TOOL = 'net.minecraftforge:binarypatcher:1.1.1:fatjar'
        INSTALLER_TOOLS = 'net.minecraftforge:installertools:1.1.11'
    }

    def getVersion = { info ->
        def branch = info.branch

        //
        if (branch in ['master', 'HEAD', MC_VERSION, MC_VERSION + '.0']) branch = null

        // 1.13.x style
        if (branch != null && branch.endsWith('.x') && MC_VERSION.startsWith(branch.substring(0, branch.length() - 2))) branch = null

        SPEC_VERSION = info.tag
        BUILD_NUMBER = LEGACY_BUILD + info.offset.toInteger()

        // Bake the response instead of making it dynamic
        return "${MC_VERSION}-${LEGACY_MAJOR}.${info.tag}.${BUILD_NUMBER}${t -> if (branch != null) t << '-' + branch}".toString()
    }

    version = '1.12.2-14.23.5.2861'
    println('Forge Version: ' + version)

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Setup
    //--------------------------------------------------------------------------------------------------------------------------------------

    patcher {
        excs.from file("$rootDir/src/main/resources/forge.exc")
        parent = project(':clean')
        patches = file("$rootDir/patches/minecraft")
        patchedSrc = file('src/main/java')
        srgPatches = true
        notchObf = true

        accessTransformer = file("$rootDir/src/main/resources/forge_at.cfg")
        //sideAnnotationStripper = file("$rootDir/src/main/resources/forge.sas")
        processor = POST_PROCESSOR

        //----------------------------------------------------------------------------------------------------------------------------------
        // Run Configurations
        //----------------------------------------------------------------------------------------------------------------------------------

        runs {
            forge_client {
                client true
                taskName 'forge_client'
                ideaModule "${rootProject.name}.${project.name}.main"
                main 'net.minecraftforge.legacydev.MainClient'
                workingDirectory project.file('run')

                environment 'target',           'fmldevclient'
                environment 'tweakClass',       'net.minecraftforge.fml.common.launcher.FMLTweaker'
                environment 'mainClass',        'net.minecraft.launchwrapper.Launch'
                environment 'assetIndex',       '{asset_index}'
                environment 'assetDirectory',   downloadAssets.output
                environment 'nativesDirectory', extractNatives.output.get().asFile
                environment 'MC_VERSION',       MC_VERSION
                environment 'MCP_VERSION',      MCP_VERSION
                environment 'MCP_MAPPINGS',     '{mcp_mappings}'
                environment 'MCP_TO_SRG',       createSrg2Mcp.getOutput().get().getAsFile().getAbsolutePath()
                environment 'FORGE_GROUP',      project.group
                environment 'FORGE_VERSION',    project.version.substring(MC_VERSION.length() + 1)

                // Lazily supply the Mappings target, createSrg2Mcp.getMappings() doesn't get populated until later
                lazyToken 'mcp_mappings', { -> createSrg2Mcp.getMappings().get() }

                mods {
                    forge { source sourceSets.main }
                }
            }

            forge_test_client {
                parent runs.forge_client
                taskName 'forge_test_client'

                environment 'MOD_CLASSES', 'dummy' // Needed to work around FG limitation, FG will replace this!

                ideaModule "${rootProject.name}.${project.name}.userdev_test"

                mods {
                    forge { source sourceSets.main }
                    tests { sources sourceSets.test }
                }
            }

            forge_server {
                client false
                taskName 'forge_server'
                ideaModule "${rootProject.name}.${project.name}.main"
                main 'net.minecraftforge.legacydev.MainServer'
                workingDirectory project.file('run')

                environment 'target',           'fmldevserver'
                environment 'tweakClass',       'net.minecraftforge.fml.common.launcher.FMLServerTweaker'
                environment 'mainClass',        'net.minecraft.launchwrapper.Launch'
                environment 'MC_VERSION',        MC_VERSION
                environment 'MCP_VERSION',       MCP_VERSION
                environment 'MCP_MAPPINGS',     '{mcp_mappings}'
                environment 'MCP_TO_SRG',       createSrg2Mcp.getOutput().get().getAsFile().getAbsolutePath()
                environment 'FORGE_GROUP',      project.group
                environment 'FORGE_VERSION',    project.version.substring(MC_VERSION.length() + 1)

                // Lazily supply the Mappings target, createSrg2Mcp.getMappings() doesn't get populated until later
                lazyToken 'mcp_mappings', { -> createSrg2Mcp.getMappings().get() }

                mods {
                    forge { source sourceSets.main }
                }
            }

            forge_test_server {
                parent runs.forge_server
                taskName 'forge_test_server'

                environment 'MOD_CLASSES', 'dummy' // Needed to work around FG limitation, FG will replace this!

                ideaModule "${rootProject.name}.${project.name}.userdev_test"

                mods {
                    forge { source sourceSets.main }
                    tests { sources sourceSets.test }
                }
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Patches
    //--------------------------------------------------------------------------------------------------------------------------------------

    applyPatches {
        originalPrefix = '../src-base/minecraft/'
        modifiedPrefix = '../src-work/minecraft/'
    }

    genPatches {
        originalPrefix = '../src-base/minecraft/'
        modifiedPrefix = '../src-work/minecraft/'
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Manifest
    //--------------------------------------------------------------------------------------------------------------------------------------

    ext {
        MANIFESTS = [
            '/': [
                'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'GitCommit': GIT_INFO.abbreviatedId,
                'Git-Branch': GIT_INFO.branch
            ] as LinkedHashMap,
            'net/minecraftforge/common/': [
                'Specification-Title': 'Forge',
                'Specification-Vendor': 'Forge Development LLC',
                'Specification-Version': SPEC_VERSION,
                'Implementation-Title': project.group,
                'Implementation-Version': project.version.substring(MC_VERSION.length() + 1),
                'Implementation-Vendor': 'Forge Development LLC'
            ] as LinkedHashMap
        ]
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Dependencies
    //--------------------------------------------------------------------------------------------------------------------------------------

    configurations {
        installer {
            transitive = false //Don't pull all libraries, if we're missing something, add it to the installer list so the installer knows to download it.
        }
        api.extendsFrom(installer)
    }

    dependencies {

        installer "org.ow2.asm:asm:9.4"
        installer "org.ow2.asm:asm-commons:9.4"
        installer "org.ow2.asm:asm-tree:9.4"
        installer "org.ow2.asm:asm-util:9.4"
        installer "org.ow2.asm:asm-analysis:9.4"
        installer 'net.minecraft:launchwrapper:1.15'
        installer 'org.jline:jline:3.5.1'
        installer 'com.typesafe.akka:akka-actor_2.11:2.3.3'
        installer 'com.typesafe:config:1.2.1'
        installer 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
        installer 'org.scala-lang:scala-compiler:2.11.1'
        installer 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2_mc'  //We change the version so old installs don't break, as our clone of the jar is different the maven central
        installer 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2_mc' // --^
        installer 'org.scala-lang:scala-library:2.11.1'
        installer 'org.scala-lang:scala-parser-combinators_2.11:1.0.1'
        installer 'org.scala-lang:scala-reflect:2.11.1'
        installer 'org.scala-lang:scala-swing_2.11:1.0.1'
        installer 'org.scala-lang:scala-xml_2.11:1.0.2'
        installer 'lzma:lzma:0.0.1'
        installer 'java3d:vecmath:1.5.2'
        installer 'net.sf.trove4j:trove4j:3.0.3'
        installer 'org.apache.maven:maven-artifact:3.5.3'
        installer 'net.sf.jopt-simple:jopt-simple:5.0.3'
        installer 'org.apache.logging.log4j:log4j-api:2.15.0' //TODO: Unpin in 1.18.1 or when Mojang bumps the Log4J version
        installer 'org.apache.logging.log4j:log4j-core:2.15.0' //TODO: Unpin in 1.18.1 or when Mojang bumps the Log4J version

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0'
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.+'
        testImplementation 'org.opentest4j:opentest4j:1.0.0' // needed for junit 5
        testImplementation 'org.hamcrest:hamcrest-all:1.3' // needs advanced matching for list order

        /*
        forgeGradleMcDeps
        +--- com.google.code.findbugs:jsr305:3.0.1
        +--- com.mojang:netty:1.6
        +--- oshi-project:oshi-core:1.1
        |    +--- net.java.dev.jna:jna:3.4.0
        |    \--- net.java.dev.jna:platform:3.4.0
        +--- net.java.dev.jna:jna:3.4.0
        +--- net.java.dev.jna:platform:3.4.0
        +--- com.ibm.icu:icu4j-core-mojang:51.2
        +--- net.sf.jopt-simple:jopt-simple:4.6
        +--- io.netty:netty-all:4.0.23.Final
        +--- com.google.guava:guava:17.0
        +--- org.apache.commons:commons-lang3:3.3.2
        +--- commons-io:commons-io:2.4
        +--- commons-codec:commons-codec:1.9
        +--- net.java.jutils:jutils:1.0.0
        +--- com.google.code.gson:gson:2.2.4
        +--- com.mojang:authlib:1.5.24
        |    +--- com.google.code.findbugs:jsr305:2.0.1 -> 3.0.1
        |    +--- com.google.guava:guava:17.0
        |    +--- org.apache.logging.log4j:log4j-core:2.0-beta9
        |    |    \--- org.apache.logging.log4j:log4j-api:2.0-beta9
        |    +--- commons-io:commons-io:2.4
        |    +--- org.apache.commons:commons-lang3:3.3.2
        |    +--- org.apache.logging.log4j:log4j-api:2.0-beta9
        |    +--- com.google.code.gson:gson:2.2.4
        |    \--- commons-codec:commons-codec:1.9
        +--- com.mojang:realms:1.10.16
        |    +--- org.apache.httpcomponents:httpcore:4.3.2
        |    +--- org.apache.httpcomponents:httpclient:4.3.3
        |    |    +--- org.apache.httpcomponents:httpcore:4.3.2
        |    |    +--- commons-logging:commons-logging:1.1.3
        |    |    \--- commons-codec:commons-codec:1.6 -> 1.9
        |    +--- org.apache.commons:commons-compress:1.8.1
        |    \--- commons-logging:commons-logging:1.1.3
        +--- org.apache.commons:commons-compress:1.8.1
        +--- org.apache.httpcomponents:httpclient:4.3.3 (*)
        +--- commons-logging:commons-logging:1.1.3
        +--- org.apache.httpcomponents:httpcore:4.3.2
        +--- it.unimi.dsi:fastutil:7.0.12_mojang
        +--- org.apache.logging.log4j:log4j-api:2.0-beta9
        +--- org.apache.logging.log4j:log4j-core:2.0-beta9 (*)
        +--- net.minecraft:launchwrapper:1.12
        |    +--- org.ow2.asm:asm-debug-all:5.0.3
        |    +--- org.apache.logging.log4j:log4j-core:2.0-beta9 (*)
        |    +--- net.sf.jopt-simple:jopt-simple:4.5 -> 4.6
        |    +--- org.lwjgl.lwjgl:lwjgl:2.9.1 -> 2.9.4-nightly-20150209
        |    |    +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        |    |    \--- net.java.jinput:jinput:2.0.5
        |    |         +--- net.java.jutils:jutils:1.0.0
        |    |         \--- net.java.jinput:jinput-platform:2.0.5
        |    \--- org.apache.logging.log4j:log4j-api:2.0-beta9
        +--- jline:jline:2.13
        |    \--- org.fusesource.jansi:jansi:1.11
        +--- com.google.code.findbugs:jsr305:1.3.9 -> 3.0.1
        +--- org.ow2.asm:asm-debug-all:5.0.3
        +--- com.typesafe.akka:akka-actor_2.11:2.3.3
        |    +--- org.scala-lang:scala-library:2.11.1
        |    \--- com.typesafe:config:1.2.1
        +--- com.typesafe:config:1.2.1
        +--- org.scala-lang:scala-actors-migration_2.11:1.1.0
        |    +--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        |    +--- org.scala-lang:scala-actors:2.11.0
        |    |    \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        |    \--- org.scala-lang.plugins:scala-continuations-library_2.11:1.0.1 -> 1.0.2
        |         \--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang:scala-compiler:2.11.1
        |    +--- org.scala-lang:scala-library:2.11.1
        |    +--- org.scala-lang:scala-reflect:2.11.1
        |    |    \--- org.scala-lang:scala-library:2.11.1
        |    +--- org.scala-lang.modules:scala-xml_2.11:1.0.2
        |    |    \--- org.scala-lang:scala-library:2.11.1
        |    \--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1
        |         \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        +--- org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2 (*)
        +--- org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2
        |    +--- org.scala-lang:scala-compiler:2.11.1 (*)
        |    \--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang:scala-library:2.11.1
        +--- org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1 (*)
        +--- org.scala-lang:scala-reflect:2.11.1 (*)
        +--- org.scala-lang.modules:scala-swing_2.11:1.0.1
        |    \--- org.scala-lang:scala-library:2.11.0 -> 2.11.1
        +--- org.scala-lang.modules:scala-xml_2.11:1.0.2 (*)
        +--- lzma:lzma:0.0.1
        +--- net.sf.trove4j:trove4j:3.0.3
        +--- com.paulscode:codecjorbis:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:codecwav:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:libraryjavasound:20101123
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:librarylwjglopenal:20100824
        |    +--- com.paulscode:soundsystem:20120107
        |    \--- org.lwjgl.lwjgl:lwjgl:2.8.3 -> 2.9.4-nightly-20150209 (*)
        +--- com.paulscode:soundsystem:20120107
        +--- net.java.jinput:jinput:2.0.5 (*)
        +--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        +--- org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209
        |    \--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        \--- java3d:vecmath:1.5.2

        forgeGradleMcDepsClient
        +--- com.paulscode:codecjorbis:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:codecwav:20101023
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:libraryjavasound:20101123
        |    \--- com.paulscode:soundsystem:20120107
        +--- com.paulscode:librarylwjglopenal:20100824
        |    +--- com.paulscode:soundsystem:20120107
        |    \--- org.lwjgl.lwjgl:lwjgl:2.8.3 -> 2.9.4-nightly-20150209
        |         +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        |         \--- net.java.jinput:jinput:2.0.5
        |              +--- net.java.jutils:jutils:1.0.0
        |              \--- net.java.jinput:jinput-platform:2.0.5
        +--- com.paulscode:soundsystem:20120107
        +--- net.java.jinput:jinput:2.0.5 (*)
        +--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        +--- org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209
        |    \--- org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209 (*)
        \--- java3d:vecmath:1.5.2

        forgeGradleMcNatives
        +--- org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209
        \--- net.java.jinput:jinput-platform:2.0.5

        forgeGradleMcpData
        \--- de.oceanlabs.mcp:mcp:1.11.2

        forgeGradleMcpMappings
        \--- de.oceanlabs.mcp:mcp_snapshot_nodoc:20161220-1.11

        launch4j - The launch4j configuration for this project.
        No dependencies

        BUILD SUCCESSFUL
        */

        implementation 'net.minecraftforge:legacydev:0.2.3.+:fatjar'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0'
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.+'
        testImplementation 'org.opentest4j:opentest4j:1.0.0' // needed for junit 5
        testImplementation 'org.hamcrest:hamcrest-all:1.3' // needs advanced matching for list order
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Extra text files for installer
    //--------------------------------------------------------------------------------------------------------------------------------------

    def extraTxts = [
        rootProject.file('CREDITS.txt'),
        rootProject.file('LICENSE.txt'),
        rootProject.file('LICENSE-Paulscode IBXM Library.txt'),
        rootProject.file('LICENSE-Paulscode SoundSystem CodecIBXM.txt')
    ]

    def changelog = rootProject.file('build/changelog.txt')
    if (changelog.exists()) {
        extraTxts += changelog
    }

    //--------------------------------------------------------------------------------------------------------------------------------------
    // Bin Patch Generation
    //--------------------------------------------------------------------------------------------------------------------------------------

    // We apply the bin patches we just created to make a jar that is JUST our changes
    ['Client', 'Server', 'Joined'].each { side ->
        def gen = tasks.getByName("gen${side}BinPatches")
        gen.tool = BINPATCH_TOOL
        task "apply${side}BinPatches"(type: ApplyBinPatches, dependsOn: gen) {
            clean = gen.cleanJar
            patch = gen.output
            tool = BINPATCH_TOOL
        }
    }
    task genRuntimeBinPatches(type: GenerateBinPatches, dependsOn: [genClientBinPatches, genServerBinPatches]) {
        tool = BINPATCH_TOOL
    }
    afterEvaluate { p ->
        genRuntimeBinPatches {
            cleanJar = genClientBinPatches.cleanJar
            dirtyJar = genClientBinPatches.dirtyJar
            srg = genClientBinPatches.srg
            patchSets.setFrom(genClientBinPatches.patchSets)
            getArgs().set([
                    '--output', '{output}',
                    '--patches', '{patches}',
                    '--srg', '{srg}',
                    '--legacy',

                    '--clean', '{clean}',
                    '--dirty', '{dirty}',
                    '--prefix', 'binpatch/client',

                    '--clean', genServerBinPatches.cleanJar.get().asFile.path,
                    '--dirty', genServerBinPatches.dirtyJar.get().asFile.path,
                    '--prefix', 'binpatch/server'
            ])
        }
    }

    task downloadLibraries(dependsOn: ':mcp:setupMCP') {
        inputs.file VERSION_JSON
        doLast {
            def json = VERSION_JSON.json()
            json.libraries.each { lib ->
                def artifacts = [lib.downloads.artifact] + lib.downloads.get('classifiers', [: ]).values()
                artifacts.each { art ->
                     def target = file('build/libraries/' + art.path)
                    if (!target.exists()) {
                        download {
                            src art.url
                            dest target
                        }
                    }
                }
            }
        }
    }

    task extractInheritance(type: ExtractInheritance, dependsOn: [genJoinedBinPatches, downloadLibraries]) {
        input = genJoinedBinPatches.cleanJar
        doFirst {
            def json = VERSION_JSON.json()
            json.libraries.each {lib ->
                def artifacts = [lib.downloads.artifact] + lib.downloads.get('classifiers', [: ]).values()
                artifacts.each { art ->
                    def target = file('build/libraries/' + art.path)
                    if (target.exists()) {
                        addLibrary(target)
                    }
                }
            }
        }
    }

    task checkATs(dependsOn: genJoinedBinPatches) {
        inputs.file { genJoinedBinPatches.cleanJar }
        inputs.files patcher.accessTransformers
        doLast {
            def vanilla = [: ]
            def zip = new ZipFile(genJoinedBinPatches.cleanJar)
            zip.entries().findAll { !it.directory && it.name.endsWith('.class') }.each { entry ->
                    new ClassReader(zip.getInputStream(entry)).accept(new ClassVisitor(Opcodes.ASM7) {

                    String name
                    void visit(int version, int access, String name, String sig, String superName, String[] interfaces) {
                        this.name = name
                        vanilla[name] = access
                    }

                    FieldVisitor visitField(int access, String name, String desc, String sig, Object value) {
                        vanilla[this.name + ' ' + name] = access
                        return null
                    }

                    MethodVisitor visitMethod(int access, String name, String desc, String sig, String[] excs) {
                        vanilla[this.name + ' ' + name + desc] = access
                        return null
                    }

               }, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES)
            }
            patcher.accessTransformers.each { f ->
                TreeMap lines = [: ]
                f.eachLine { line ->
                    def idx = line.indexOf('#')
                    if (idx == 0 || line.isEmpty()) return
                    def comment = idx == -1 ? null : line.substring(idx)
                    if (idx != -1) line = line.substring(0, idx - 1)
                    def(modifier, cls, desc) = (line.trim() + '     ').split(' ', -1)
                    def key = cls + (desc.isEmpty() ? '' : ' ' + desc)
                    def access = vanilla[key.replace('.', '/')]
                    if (access == null) {
                        if ((desc.equals('*') || desc.equals('*()')) && vanilla[cls.replace('.', '/')] != null) {
                            println('Warning: ' + line)
                        } else {
                            println('Invalid: ' + line)
                            return
                        }
                    }
                    //TODO: Check access actually changes, and expand inheretence?
                    lines[key] = [modifier: modifier, comment: comment]
                }
                f.text = lines.collect { it.value.modifier + ' ' + it.key + (it.value.comment == null ? '' : ' ' + it.value.comment) }.join('\n')
            }
        }
    }

    task checkSAS(dependsOn: extractInheritance) {
        inputs.file { extractInheritance.output }
        inputs.files patcher.sideAnnotationStrippers
        doLast {
            def json = extractInheritance.output.json()

            patcher.sideAnnotationStrippers.each { f ->
                def lines = []
                f.eachLine { line ->
                    if (line[0] == '\t') return //Skip any tabed lines, those are ones we add
                    def idx = line.indexOf('#')
                    if (idx == 0 || line.isEmpty()) {
                        lines.add(line)
                        return
                    }

                    def comment = idx == -1 ? null : line.substring(idx)
                    if (idx != -1) line = line.substring(0, idx - 1)

                    def(cls, desc) = (line.trim() + '    ').split(' ', -1)
                    cls = cls.replaceAll('\\.', '/')
                    desc = desc.replace('(', ' (')
                    if (desc.isEmpty() || json[cls] == null || json[cls]['methods'] == null || json[cls]['methods'][desc] == null) {
                        println('Invalid: ' + line)
                        return
                    }

                    def mtd = json[cls]['methods'][desc]
                    lines.add(cls + ' ' + desc.replace(' ', '') + (comment == null ? '' : ' ' + comment))
                    def children = json.values().findAll { it.methods != null && it.methods[desc] != null && it.methods[desc].override == cls }
                    .collect { it.name + ' ' + desc.replace(' ', '') } as TreeSet
                    children.each { lines.add('\t' + it) }
                }
                f.text = lines.join('\n')
            }
        }
    }

    task launcherJson(dependsOn: ['signUniversalJar']) {
        inputs.file { universalJar.archivePath }
        ext {
            output = file('build/version.json')
            vanilla = project(':mcp').file('build/mcp/downloadJson/version.json')
            timestamp = iso8601Now()
            comment = [
                'Please do not automate the download and installation of Forge.',
                'Our efforts are supported by ads from the download page.',
                'If you MUST automate this, please consider supporting the project through https://www.patreon.com/LexManos/'
             ]
            def idx = project.version.indexOf('-')
            id = project.version.substring(0, idx) + "-${project.name}" + project.version.substring(idx)
        }
        inputs.file vanilla
        outputs.file output
        doLast {
            def json_vanilla = vanilla.json()
            def json = [
                _comment_: comment,
                id: id,
                time: timestamp,
                releaseTime: timestamp,
                type: 'release',
                mainClass: 'net.minecraft.launchwrapper.Launch',
                inheritsFrom: MC_VERSION,
                logging: { },
                arguments: [
                    '--username', '${auth_player_name}',
                    '--version', '${version_name}',
                    '--gameDir', '${game_directory}',
                    '--assetsDir', '${assets_root}',
                    '--assetIndex', '${assets_index_name}',
                    '--uuid', '${auth_uuid}',
                    '--accessToken', '${auth_access_token}',
                    '--userType', '${user_type}',
                    '--tweakClass', 'net.minecraftforge.fml.common.launcher.FMLTweaker',
                    '--versionType', 'Forge'
                ],
                libraries: [
                    [
                        //Package our universal jar as the 'main' jar Mojang's launcher loads. It will in turn load Forge's regular jars itself.
                        name: "${project.group}:${project.name}:${project.version}",
                        downloads: [
                            artifact: [
                                path: "${project.group.replace('.', '/')}/${project.name}/${project.version}/${project.name}-${project.version}.jar",
                                url: '', //Do not include the URL so that the installer/launcher won't grab it. This is also why we don't have the universal classifier
                                sha1: sha1(universalJar.archivePath),
                                size: universalJar.archivePath.length()
                            ]
                        ]
                    ]
                ]
            ]
            def artifacts = getArtifacts(project, project.configurations.installer, false)
            artifacts.each { key, lib ->
                json.libraries.add(lib)
            }
            output.text = new JsonBuilder(json).toPrettyString()
        }
    }

    task installerJson(dependsOn: [launcherJson, genClientBinPatches/*, createClientSRG, createServerSRG*/]) {
        ext {
            output = file('build/install_profile.json')
            INSTALLER_TOOLS = 'net.minecraftforge:installertools:1.1.4'
        }
        inputs.file universalJar.archivePath
        inputs.file genClientBinPatches.toolJar
        inputs.file launcherJson.output
        outputs.file output
        doLast {
            def libs = [
                "${project.group}:${project.name}:${project.version}": [
                    name: "${project.group}:${project.name}:${project.version}",
                    downloads: [
                        artifact: [
                            path: "${project.group.replace('.', '/')}/${project.name}/${project.version}/${project.name}-${project.version}.jar",
                            url: '', //Do not include the URL so that the installer/launcher won't grab it. This is also why we don't have the universal classifier
                            sha1: sha1(universalJar.archivePath),
                            size: universalJar.archivePath.length()
                        ]
                    ]
                ]
            ]
            def json = [
                _comment_: launcherJson.comment,
                spec: 0,
                profile: project.name,
                version: launcherJson.id,
                icon: 'data:image/png;base64,' + new String(Base64.getEncoder().encode(Files.readAllBytes(rootProject.file('icon.ico').toPath()))),
                json: '/version.json',
                path: "${project.group}:${project.name}:${project.version}",
                logo: '/big_logo.png',
                minecraft: MC_VERSION,
                welcome: "Welcome to the simple ${project.name.capitalize()} installer.",
                data: [
                ] as Map,
                processors: []
            ]
            getClasspath(project, libs, MCP_ARTIFACT.get().descriptor) //Tell it to download mcp_config
            json.libraries = libs.values().sort { a, b -> a.name.compareTo(b.name) }

            output.text = new JsonBuilder(json).toPrettyString()
        }
    }

    task extractObf2Srg(type: ExtractMCPData, dependsOn: [':mcp:downloadConfig']) {
        config = project(':mcp').downloadConfig.output
    }

    task deobfDataLzma(dependsOn: [extractObf2Srg]) {
        ext {
            output_srg = file('build/deobfDataLzma/data.srg')
            output = file('build/deobfDataLzma/data.lzma')
        }

        doLast {
            IMappingFile.load(extractObf2Srg.output.get().getAsFile()).write(output_srg.toPath(), IMappingFile.Format.SRG, false)
            output_srg.withInputStream { ins ->
                output.withOutputStream { outs ->
                    def lz = new LZMACompressorOutputStream(outs)

                    def i = -1
                    def buf = new byte[0x100]
                    while ((i = ins.read(buf)) != -1)
                        lz.write(buf, 0, i)

                    lz.close()
                }
            }
        }
    }

    universalJar {
        from(extraTxts)
        dependsOn(deobfDataLzma)
        from(deobfDataLzma.output) {
            rename { "deobfuscation_data-${MC_VERSION }.lzma" }
        }
        dependsOn(genRuntimeBinPatches)
        from(genRuntimeBinPatches.output) {
            rename { 'binpatches.pack.lzma' }
        }
        doFirst {
            def classpath = new StringBuilder()
            def artifacts = getArtifacts(project, project.configurations.installer, false)
            artifacts.each { key, lib ->
                classpath.append("libraries/${lib.downloads.artifact.path} ")
            }
            classpath += "minecraft_server.${MC_VERSION}.jar"
            MANIFESTS.each { pkg, values ->
                if (pkg == '/') {
                    manifest.attributes(values += [
                        'Main-Class': 'net.minecraftforge.fml.relauncher.ServerLaunchWrapper',
                        'Class-Path': classpath.toString(),
                        'Tweak-Class': 'net.minecraftforge.fml.common.launcher.FMLTweaker'
                    ])
                } else {
                    manifest.attributes(values, pkg)
                }
            }
        }
    }

    task downloadInstaller(type: DownloadMavenArtifact) {
        artifact = 'net.minecraftforge:installer:2.0.+:shrunk'
        changing = true
    }

    task installerJar(type: Zip, dependsOn: [downloadInstaller, installerJson, launcherJson, genClientBinPatches, genServerBinPatches, 'signUniversalJar']) {
        classifier = 'installer'
        extension = 'jar' //Needs to be Zip task to not override Manifest, so set extension
        destinationDir = file('build/libs')
        from(extraTxts)
        from(rootProject.file('/src/main/resources/forge_logo.png')) {
            rename { 'big_logo.png' }
        }
        from(rootProject.file('/src/main/resources/url.png'))
        from(universalJar) {
            into("/maven/${project.group.replace('.', '/')}/${project.name}/${project.version}/")
            rename { "${project.name }-${project.version }.jar" }
        }
        from(installerJson.output)
        from(launcherJson.output)
        from(zipTree(downloadInstaller.output)) {
            duplicatesStrategy = 'exclude'
        }
    }

    [universalJar, installerJar].each { t ->
        task "sign${t.name.capitalize()}"(type: SignJar, dependsOn: t) {
            onlyIf {
                JAR_SIGNER != null && t.state.failure == null
            }
            def jarsigner = JAR_SIGNER == null ? [: ] : JAR_SIGNER
            alias = 'forge'
            storePass = jarsigner.storepass
            keyPass = jarsigner.keypass
            keyStore = jarsigner.keystore
            inputFile = t.archivePath
            outputFile = t.archivePath
            doFirst {
                project.logger.lifecycle('Signing: ' + inputFile)
            }
        }
        t.finalizedBy(tasks.getByName("sign${t.name.capitalize()}"))
    }

    task makeMdk(type: Zip) {
        baseName = project.name
        classifier = 'mdk'
        version = project.version
        destinationDir = file('build/libs')

        from rootProject.file('gradlew')
        from rootProject.file('gradlew.bat')
        from extraTxts
        from(rootProject.file('gradle/')) {
            into('gradle/')
        }
        from(rootProject.file('mdk/')) {
            rootProject.file('mdk/gitignore.txt').eachLine {
                if (!it.trim().isEmpty() && !it.trim().startsWith('#')) {
                    exclude it
                }
            }
            filter(ReplaceTokens, tokens: [
                FORGE_VERSION: project.version,
                FORGE_GROUP: project.group,
                FORGE_NAME: project.name,
                MC_VERSION: MC_VERSION,
                MAPPING_CHANNEL: MAPPING_CHANNEL,
                MAPPING_VERSION: MAPPING_VERSION
            ])
            rename 'gitignore\\.txt', '.gitignore'
        }
    }

    userdevConfig {
        def artifacts = getArtifacts(project, project.configurations.installer, true)
        artifacts.each { key, lib ->
            libraries.add(lib.name)
        }
        libraries.add('net.minecraftforge:legacydev:0.2.3.+:fatjar')
        universalFilters.add('^(?!binpatches\\.pack\\.lzma$).*$')

        runs {
            client {
                main 'net.minecraftforge.legacydev.MainClient'

                environment 'tweakClass', 'net.minecraftforge.fml.common.launcher.FMLTweaker'
                environment 'mainClass', 'net.minecraft.launchwrapper.Launch'
                environment 'assetIndex', '{asset_index}'
                environment 'assetDirectory', '{assets_root}'
                environment 'nativesDirectory', '{natives}'
                environment 'MC_VERSION', MC_VERSION
                environment 'MCP_MAPPINGS', '{mcp_mappings}'
                environment 'MCP_TO_SRG', '{mcp_to_srg}'
                environment 'FORGE_GROUP', project.group
                environment 'FORGE_VERSION', project.version.substring(MC_VERSION.length() + 1)
            }

            server {
                main 'net.minecraftforge.legacydev.MainServer'

                environment 'tweakClass', 'net.minecraftforge.fml.common.launcher.FMLServerTweaker'
                environment 'mainClass', 'net.minecraft.launchwrapper.Launch'
                environment 'MC_VERSION', MC_VERSION
                environment 'MCP_MAPPINGS', '{mcp_mappings}'
                environment 'MCP_TO_SRG', '{mcp_to_srg}'
                environment 'FORGE_GROUP', project.group
                environment 'FORGE_VERSION', project.version.substring(MC_VERSION.length() + 1)
            }
        }
    }

    task userdevExtras(type: Jar) {
        dependsOn classes
        from sourceSets.userdev.output
        classifier 'userdev-temp'
    }

    task userdevExtrasReobf(type: ReobfuscateJar) {
        dependsOn userdevExtras, createMcp2Srg
        input = tasks.userdevExtras.archivePath
        srg = tasks.createMcp2Srg.output
    }

    userdevJar {
        dependsOn userdevExtrasReobf
        from(zipTree(tasks.userdevExtrasReobf.output)) {
            into '/inject/'
        }
        from(sourceSets.userdev.output.resourcesDir) {
            into '/inject/'
        }
        classifier 'userdev3' // Should be 'userdev' but FG5 hardcodes pre 1.13 versions to userdev3
    }

    tasks.eclipse.dependsOn('genEclipseRuns')

    if (project.hasProperty('UPDATE_MAPPINGS')) {
        extractRangeMap {
            sources sourceSets.test.java.srcDirs
        }
        applyRangeMap {
            sources sourceSets.test.java.srcDirs
        }
        sourceSets.test.java.srcDirs.each { extractMappedNew.addTarget it }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact universalJar
                if (changelog.exists()) {
                    artifact(changelog) {
                        classifier = 'changelog'
                    }
                }
                artifact installerJar
                //TODO: installer-win
                artifact makeMdk
                artifact userdevJar
                artifact sourcesJar

                pom {
                    name = 'forge'
                    description = 'Modifactions to Minecraft to enable mod developers.'
                    url = 'https://github.com/MinecraftForge/MinecraftForge'

                    scm {
                        url = 'https://github.com/MinecraftForge/MinecraftForge'
                        connection = 'scm:git:git://github.com/MinecraftForge/MinecraftForge.git'
                        developerConnection = 'scm:git:git@github.com:MinecraftForge/MinecraftForge.git'
                    }

                    issueManagement {
                        system = 'github'
                        url = 'https://github.com/MinecraftForge/MinecraftForge/issues'
                    }

                    licenses {
                        license {
                            name = 'LGPL 2.1'
                            url = 'https://github.com/MinecraftForge/MinecraftForge/blob/1.12.x/LICENSE.txt'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (project.hasProperty('forgeMavenPassword')) {
                    credentials {
                        username project.properties.forgeMavenUser
                        password project.properties.forgeMavenPassword
                    }
                    url 'https://files.minecraftforge.net/maven/manage/upload'
                } else {
                    url 'file://' + rootProject.file('repo').getAbsolutePath()
                }
            }
        }
    }
}

task setup() {
    dependsOn ':clean:extractMapped'
    dependsOn ':forge:extractMapped' //These must be strings so that we can do lazy resolution. Else we need evaluationDependsOnChildren above
}